// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  chapters    Chapter[]
  purchases   Purchase[]
  season      Season?      @relation(fields: [seasonId], references: [id])
  seasonId    String?
  // @@fulltext([title])

  @@index([categoryId])
  @@index([seasonId])
}

model Season {
  id     String   @id @default(uuid())
  name   String
  course Course[]
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdat DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id               String             @id @default(uuid())
  title            String
  description      String?
  courseId         String
  videoUrl         String?
  position         Int
  isPublished      Boolean            @default(false)
  isFree           Boolean            @default(false)
  muxData          MuxData?
  course           Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress     UserProgress[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  purchasesChapter PurchaseChapters[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  chapterId  String  @unique
  assetId    String
  playbackId String?
  Chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String @id @default(uuid())
  userId    String
  chapterId String

  Chapter     Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model PurchaseChapters {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  watchNumber Int      @default(0)
  whatched    Int?     @default(0)
  seeTime     DateTime

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model PaymobCustomer {
  id             String   @id @default(uuid())
  userId         String   @unique
  userEmail      String   @unique
  userName       String
  totalCourses   Int?     @default(0)
  totalPurchases Int      @default(0)
  PaymobBuyerId  String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ChapterCustomer {
  id            String   @id @default(uuid())
  userId        String   @unique
  userEmail     String   @unique
  userName      String
  totalChapters Int?     @default(0)
  PaymobBuyerId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
